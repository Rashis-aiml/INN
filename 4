Design and implement a feedforward neural network featuring multiple layers, and assess its performance on a given dataset. Develop an algorithm to construct and train the neural network, followed by a comprehensive evaluation of its effectiveness in handling the provided dataset.

import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score




# Load Iris dataset
iris = load_iris()
X, y = iris.data, iris.target





# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)





# Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)





# Create a feedforward neural network model with one hidden layer
model = Sequential()
model.add(Dense(64, activation='relu', input_shape=(X_train.shape[1],)))
model.add(Dense(3, activation='sigmoid'))  # Output layer for 3 classes with sigmoid activation





# Compile the model
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=50, batch_size=8, validation_split=0.2)
